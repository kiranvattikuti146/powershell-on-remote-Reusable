name: PowerShell Task

on:
  workflow_call:
    inputs:
      Machines:
        required: true
        type: string
      UserName:
        required: true
        type: string
      UserPassword:
        required: true
        type: string
      ScriptType:
        required: true
        type: string
      ScriptPath:
        required: false
        type: string
      InlineScript:
        required: false
        type: string
      ScriptArguments:
        required: false
        type: string
      SessionVariables:
        required: false
        type: string

jobs:
  execute-powershell:
    runs-on: self-hosted
    steps:
      - name: Execute PowerShell Script
        run: |
          try {
              # Assign inputs to variables
              $machines = "${{ inputs.Machines }}"
              $username = "${{ inputs.UserName }}"
              $password = "${{ inputs.UserPassword }}"
              $scriptType = "${{ inputs.ScriptType }}"
              $scriptPath = "${{ inputs.ScriptPath }}"
              $inlineScript = "${{ inputs.InlineScript }}"
              $scriptArguments = "${{ inputs.ScriptArguments }}"
              $sessionVariables = "${{ inputs.SessionVariables }}"
              
              # Convert password to secure string and create a credential object
              $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
              $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

              # Add the specific IP address to TrustedHosts
              Set-Item -Path WSMan:\localhost\Client\TrustedHosts -Value $machines -Force

              # Test connectivity to the remote machine
              Test-Connection -ComputerName $machines -Count 1 -ErrorAction Stop

              # Execute based on ScriptType
              if ($scriptType -eq 'FilePath') {
                  if (-not $scriptPath) {
                      throw "ScriptPath is required when ScriptType is 'FilePath'."
                  }
                  Invoke-Command -ComputerName $machines -Credential $credential -FilePath $scriptPath -ArgumentList $scriptArguments
              } elseif ($scriptType -eq 'Inline') {
                  if (-not $inlineScript) {
                      throw "InlineScript is required when ScriptType is 'Inline'."
                  }
                  $scriptBlock = [ScriptBlock]::Create($inlineScript)
                  $pw_result = Invoke-Command -ComputerName $machines -Credential $credential -ScriptBlock $scriptBlock -Verbose
                  Write-Output $pw_result
                  Write-Host $pw_result
              } else {
                  throw "Invalid ScriptType provided. Valid values are 'FilePath' or 'Inline'."
              }
          } catch {
              Write-Error "An error occurred: $_"
              exit 1
          }
