name: PowerShell Task

on:
  workflow_call:
    inputs:
      Machines:
        required: true
        type: string
      UserName:
        required: true
        type: string
      UserPassword:
        required: true
        type: string
      ScriptType:
        required: true
        type: string
      ScriptPath:
        required: false
        type: string
      InlineScript:
        required: false
        type: string
      ScriptArguments:
        required: false
        type: string
      SessionVariables:
        required: false
        type: string
      CommunicationProtocol:
        required: false
        type: string
        default: "Https"
      AuthenticationMechanism:
        required: false
        type: string
        default: "Default"
      ErrorActionPreference:
        required: false
        type: string
        default: "stop"
      failOnStderr:
        required: false
        type: boolean
        default: false
      ignoreLASTEXITCODE:
        required: false
        type: boolean
        default: false
      WorkingDirectory:
        required: false
        type: string
      RunPowershellInParallel:
        required: false
        type: boolean
        default: true

jobs:
  execute-powershell:
    runs-on: self-hosted
    steps:
      - name: Execute PowerShell Script
        run: |
          try {
              # Assign inputs to variables
              $machines = "${{ inputs.Machines }}"
              $username = "${{ inputs.UserName }}"
              $password = "${{ inputs.UserPassword }}"
              $scriptType = "${{ inputs.ScriptType }}"
              $scriptPath = "${{ inputs.ScriptPath }}"
              $inlineScript = "${{ inputs.InlineScript }}"
              $scriptArguments = "${{ inputs.ScriptArguments }}"
              $sessionVariables = "${{ inputs.SessionVariables }}"
              $communicationProtocol = "${{ inputs.CommunicationProtocol }}"
              $authenticationMechanism = "${{ inputs.AuthenticationMechanism }}"
              $errorActionPreference = "${{ inputs.ErrorActionPreference }}"
              $failOnStderr = "${{ inputs.failOnStderr }}"
              $ignoreLASTEXITCODE = "${{ inputs.ignoreLASTEXITCODE }}"
              $workingDirectory = "${{ inputs.WorkingDirectory }}"
              $runPowershellInParallel = "${{ inputs.RunPowershellInParallel }}"

              # Set ErrorActionPreference
              $ErrorActionPreference = $errorActionPreference

              # Convert password to secure string and create a credential object
              $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
              $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

              # Add the specific IP address to TrustedHosts
              Set-Item -Path WSMan:localhostClientTrustedHosts -Value $machines -Force

              # Test connectivity to the remote machine
              Test-Connection -ComputerName $machines -Count 1 -ErrorAction Stop

              # Execute based on ScriptType
              if ($scriptType -eq 'FilePath') {
                  if (-not $scriptPath) {
                      throw "ScriptPath is required when ScriptType is 'FilePath'."
                  }
                  Invoke-Command -ComputerName $machines -Credential $credential -FilePath $scriptPath -ArgumentList $scriptArguments -Authentication $authenticationMechanism -UseSSL:($communicationProtocol -eq 'Https')
              } elseif ($scriptType -eq 'Inline') {
                  if (-not $inlineScript) {
                      throw "InlineScript is required when ScriptType is 'Inline'."
                  }
                  $scriptBlock = [ScriptBlock]::Create($inlineScript)
                  $pw_result = Invoke-Command -ComputerName $machines -Credential $credential -ScriptBlock $scriptBlock -Authentication $authenticationMechanism -UseSSL:($communicationProtocol -eq 'Https') -Verbose
                  Write-Output $pw_result
                  Write-Host $pw_result
              } else {
                  throw "Invalid ScriptType provided. Valid values are 'FilePath' or 'Inline'."
              }

              # Handle failOnStderr and ignoreLASTEXITCODE
              if ($failOnStderr -and $pw_result) {
                  throw "Errors detected in the error pipeline."
              }

              if (-not $ignoreLASTEXITCODE) {
                  exit $LASTEXITCODE
              }
          } catch {
              Write-Error "An error occurred: $_"
              exit 1
          }
